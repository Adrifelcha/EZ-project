j
up.bound[[idx2]]
j = bound.list[[2]]
idx <- as.numeric(which(bound.list==j))
idx2 <- up.idx[idx]
arc <- seq(from=j,to=up.bound[[idx2]],length.out=500)
x1 = polarToRect(arc,boundary)[,1]
y1 = polarToRect(arc,boundary)[,2]
keep = round(full.arc,1) %in% round(arc,1)
d.points = full.d[keep]
a.points = full.arc[keep]
x2 = rev(polarToRect(a.points,boundary)[,1])
y.point = (boundary+d.points)*sin(a.points)
y2 = rev(y.point)
x.range = c(x1,x2)
y.range = c(y1,y2)
polygon(x=x.range, y=y.range,
xpd=NA, col=color.names[idx])
keep
sum(keep)
sum(d.points)
sum(a.points)
length(a.points)
length(d.points)
-1^1
-1^2
-1^3
-1^4
source("~/.active-rstudio-document", echo=TRUE)
a(0:10)
mean(c(100,4/5,3/4))
3/4
mean(c(1,4/5,3/4))
mean(c(1,4/5,3/4))*.2
mean(c(1,3/4,3/4))*.2
mean(c(1,3/4,3/4,1,1))*.2
mean(c(1,4/5,3/4,1,1))*.2
mean(c(1,4/5,3/4,3/4,1))*.2
Bayes = function(pU, pRed_given_Urn1, pRed_given_Urn2){
X = pU*pRed_given_Urn1
Y = (1-pU)*pRedgiven_Urn2
output = X/(X+Y)
}
Bayes(0.5,0.8,0.1)
source("~/.active-rstudio-document", echo=TRUE)
Bayes = function(pU, pRed_given_Urn1, pRed_given_Urn2){
X = pU*pRed_given_Urn1
Y = (1-pU)*pRed_given_Urn2
output = X/(X+Y)
}
Bayes(0.5,0.8,0.1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
0.5*0.4
0.5*0.2
0.5*0.8
0.5*0.1
0.4/(0.4+0.05)
rnbinom(10,10,0.1)
rnbinom(100,10,1/6)
?rnbinom
rnbinom(100,1,1/6)
mean(rnbinom(100,1,1/6))
4*4*4*4
4*3*2
4/6
2/4
5/9
5/7
3/5
4/7
4/5
6/7
3/5
5/7
4/6
4/6
0.5*0.5
0.75/0.25
4/36
6*6
2/36
Bayes(1/6,1/6,5/6)
(250*200)/25
200/2000
6
6^5
7776/6
dbinom(0,3,0.75)
dbinom(1,3,0.75)
dbinom(2,3,0.75)
dbinom(3,3,0.75)
0.421875+0.421875+0.1406+0.1562
0.421875+0.421875+0.1406+0.01562
dbinom(2,3,0.75)*2
dbinom(2,3,0.75)*3
0.1406+0.84375+1.265625
9/4
dbinom(1,30,0.02)
dbinom(2,30,0.02)
dbinom(1,40,0.03)
dbinom(1,40,0.03)
0.03*(0.97^39)
0.03*(0.97^39)*40
dbinom(0,40,0.03)
dbinom(0,40,0.03)+dbinom(1,40,0.03)
dbinom(0,30,0.02)+dbinom(1,30,0.02)
40*0.03
1.2/40
pbinom(0,40,0.03)
dbinom(1,40,0.03)
pbinom(1,40,0.03)
qbinom(1,40,0.03)
choose(25000,10000)
n = 40
x = 0:40
plot(x,choose(n,x))
n = 40
x = 0:40
plot(x,choose(n,x), pch=16)
n = 40
k = 0:40
plot(k,choose(n,k), pch=16)
n = 40
k = 0:40
plot(k,choose(n,k), pch=16)
install.packages("mnormt")
library(mnormt)
#make this example reproducible
set.seed(0)
#create bivariate normal distribution
x     <- seq(-3, 3, 0.1)
y     <- seq(-3, 3, 0.1)
mu    <- c(0, 0)
sigma <- matrix(c(2, -1, -1, 2), nrow=2)
f     <- function(x, y) dmnorm(cbind(x, y), mu, sigma)
z     <- outer(x, y, f)
#create surface plot
persp(x, y, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
?outer
z
dim(z)
f(x,t)
f(x,y)
length(f(x,y))
z
library(mnormt)
#make this example reproducible
set.seed(0)
#create bivariate normal distribution
x     <- seq(-3, 3, 0.1)
y     <- seq(-3, 3, 0.1)
mu    <- c(0, 0)
sigma <- matrix(c(2, -1, -1, 2), nrow=2)
f     <- function(x, y) dmnorm(cbind(x, y), mu, sigma)
z     <- outer(x, y, f)
#create surface plot
persp(x, y, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
par = list("mean" = 10,
"sd" = 1)
low.bound = 1
up.bound = 10
kappa = 1000
X <- seq(low.bound,up.bound,length.out=kappa)
X
Z = 5
Z + ZË†2 /(Z + 7) * 10
Z + Z^2 /(Z + 7) * 10
Z + (Z^2 /(Z + 7)) * 10
22-11
22-3.5
22-3.5
22-14
22-17
22-9.5
22-9
22-14
22-16.5
22-11
22-15.5
22-17.5
22-13.5
23+5+3+1+2+2+3+2+1
22+4+3+1+4+2+1
37+5
22-16.5
22-6.5
20-15.5
knitr::opts_chunk$set(echo = TRUE)
# Part 1: Simulate single trial outcome
simulate_ddm <- function(a, v, dt, max_steps){
x <- 0
random_dev <- rnorm(max_steps)
# Scale step changes by dt
noise <- random_dev * sqrt(dt)
drift <- v * dt
for(i in 2:max_steps){
this_step = drift + noise[i]
x = x + this_step
if(abs(x)>=(a/2)){  break  }
}
output <- list("RT" = (i+1)*dt, "C"  = x)
return(output)
}
# Part 2: Simulate over 'n' trials
wdmrnd <- function(a,v,t,n){
dt = 0.001
max_steps = 10 / dt
rt = rep(NA,n)
accuracy = rep(NA,n)
for(i in 1:n){
X <- simulate_ddm(a, v, dt, max_steps)
rt[i] <- X$RT
if(X$C>0){  accuracy[i] <- 1
}else{    accuracy[i] <- 0  }
}
output <- data.frame("RT" = rt + t, "accuracy" = accuracy)
return(output)
}
a = 1.50
v = 0.00
t = 0.30
n = 10000
data <- wdmrnd(a, v, t, n)
rt <- data$RT
accuracy <- data$accuracy
par(mfrow = c(1, 3),
mar =c(5.1,2,4.1,2),
bty = "o")
hist(rt[accuracy==1], ann=F, axes=F, breaks=50, col="lightgreen",
border=NA)
mtext("Distribution of Reaction Times", 3, cex=0.65, line=0.5)
mtext("Reaction Time", 1, cex=0.6, line=2)
mtext("Count", 2, cex=0.6, line=1)
legend("topright", col="lightgreen", "Correct", pch=15, cex=0.7, bty="n")
axis(1,c(0:5),line=-0.7)
hist(rt[accuracy==0], ann=F, axes=F, breaks=50, col="indianred1",
border=NA)
mtext("Distribution of Reaction Times", 3, cex=0.65, line=0.5)
mtext("Reaction Time", 1, cex=0.6, line=2)
mtext("Count", 2, cex=0.6, line=1)
legend("topright", col="indianred1", "Incorrect", pch=15, cex=0.7, bty="n")
axis(1,c(0:5),line=-0.7)
barplot(c(sum(1-accuracy),sum(accuracy)), ann=F, axes=F,
col=c("red3","springgreen3"))
mtext("Accuracy Histogram", 3, cex=0.65, line=0.5)
mtext("Count", 2, cex=0.6, line=1)
axis(1,c(0.7,1.9),c("Incorrect","Correct"))
################################################################
####    Auxiliary functions   ##################################
################################################################
# A function to print the settings used in the simulation
design_summary = function(settings){
cat("========== EZBHDDM Design Parameters: =======\n")
cat("Number of Participants:    ", settings$nPart,"\n")
cat("Trials Per Person:",settings$nTrials,"\n")
cat("Priors:\n")
t(settings$prior)
}
# A function to load and print default prior values
default_priors <- function(Show=TRUE){
prior <- data.frame("bound_mean_mean" = 1.50,
"bound_mean_sdev" = 0.20,
"drift_mean_mean" = 0.00,
"drift_mean_sdev" = 0.50,
"nondt_mean_mean" = 0.30,
"nondt_mean_sdev" = 0.06,
"bound_sdev_lower" = 0.10,
"bound_sdev_upper" = 0.20,
"drift_sdev_lower" = 0.20,
"drift_sdev_upper" = 0.40,
"nondt_sdev_lower" = 0.01,
"nondt_sdev_upper" = 0.05)
if(Show){
cat("========== EZBHDDM Priors: ===============\n")
cat("Bound Mean Mean:   ", prior$bound_mean_mean,"\n")
cat("Bound Mean Std Dev:",prior$bound_mean_sdev,"\n")
cat("Drift Mean Mean:   ",prior$drift_mean_mean,"\n")
cat("Drift Mean Std Dev:",prior$drift_mean_sdev,"\n")
cat("Non-decision Time Mean Mean:",prior$nondt_mean_mean,"\n")
cat("Non-decision Time Mean Std: ", prior$nondt_mean_sdev,"\n")
cat("Bound Std Dev Shape:",prior$bound_sdev_lower,"\n")
cat("Bound Std Dev Scale:",prior$bound_sdev_upper,"\n")
cat("Drift Std Dev Shape:",prior$drift_sdev_lower,"\n")
cat("Drift Std Dev Scale:",prior$drift_sdev_upper,"\n")
cat("Non-decision Time Shape:",prior$nondt_sdev_lower,"\n")
cat("Non-decision Time Scale:",prior$nondt_sdev_upper,"\n")
}
return(prior)
}
# A function to write the JAGS model using the prior values
write_JAGSmodel <- function(prior,fileName = "EZHBDDM.bug"){
fileName <- "EZHBDDM.bug"
opening <- "model{"
prior.bound_m <- paste("          bound_mean ~ dnorm(", prior$bound_mean_mean,",pow(",prior$bound_mean_sdev,",-2))T(0.10,3.00)", sep="")
prior.drift_m <- paste("          drift_mean ~ dnorm(", prior$drift_mean_mean,",pow(",prior$drift_mean_sdev,",-2))T(-3.00,3.00)", sep="")
prior.nondt_m <- paste("          nondt_mean ~ dnorm(", prior$nondt_mean_mean,",pow(",prior$nondt_mean_sdev,",-2))T(0.05,1.00)", sep="")
prior.bound_sd <- paste("          bound_sdev ~ dunif(", prior$bound_sdev_lower,",",prior$bound_sdev_upper,")", sep="")
prior.drift_sd <- paste("          drift_sdev ~ dunif(", prior$drift_sdev_lower,",",prior$drift_sdev_upper,")", sep="")
prior.nondt_sd <- paste("          nondt_sdev ~ dunif(", prior$nondt_sdev_lower,",",prior$nondt_sdev_upper,")", sep="")
content <-"
# Sampling model
for (p in 1:nParticipants){
bound[p] ~ dnorm(bound_mean, pow(bound_sdev, -2))T(0.10,3.00)
drift[p] ~ dnorm(drift_mean, pow(drift_sdev, -2))T(-3.00,3.00)
nondt[p] ~ dnorm(nondt_mean, pow(nondt_sdev, -2))T(0.05,1.00)
# Forward equations from EZ Diffusion
ey[p]  = exp(-bound[p] * drift[p])
Pc[p]  = 1 / (1 + ey[p])
PRT[p] = 2 * pow(drift[p], 3) / bound[p] * pow(ey[p] + 1, 2) / (2 * -bound[p] * drift[p] * ey[p] - ey[p]*ey[p] + 1)
MDT[p] = (bound[p] / (2 * drift[p])) * (1 - ey[p]) / (1 + ey[p])
MRT[p] = MDT[p] + nondt[p]
# Loss functions using MRT, PRT, and Pc
meanRT[p]  ~ dnorm(MRT[p], PRT[p] * correct[p])
varRT[p]   ~ dnorm(1/PRT[p], 0.5 * correct[p] * PRT[p] * PRT[p])
correct[p] ~ dbin(Pc[p], nTrialsPerPerson)
}
}"
final_file <- file(fileName)
writeLines(c(opening,prior.bound_m,prior.drift_m,prior.nondt_m,
prior.bound_sd,prior.drift_sd,prior.nondt_sd,content),
final_file)
close(final_file)
}
data_toJAGS <- function(){
passData <- list("nParticipants", "nTrialsPerPerson",
"meanRT", "varRT", "correct")
return(passData)
}
default_inits <- function(n.chains,nParticipants){
myinits <- rep(list(list()), n.chains)
for(i in 1:n.chains){
myinits[[i]] <- list(drift = rnorm(nParticipants,0,1/0.1^2))
}
return(myinits)
}
nSim <- 200
prior <- default_priors()
nParticipants <- 50
nTrials <- 150
n.chains = 4
save_sampleFiles = FALSE
samplesFileName = "samples.RData"
settings <- list("nPart"   = nParticipants,
"nTrials" = nTrials,
"prior"   = prior)
################################################################
####    Core functions       ##################################
################################################################
# Sample 'true' parameter values from the priors specified
sample_parameters <- function(settings){
prior <- settings$prior
nP <- settings$nPart
bound_mean <- rnorm(1,prior$bound_mean_mean,prior$bound_mean_sdev)
drift_mean <- rnorm(1,prior$drift_mean_mean,prior$drift_mean_sdev)
nondt_mean <- rnorm(1,prior$nondt_mean_mean,prior$nondt_mean_sdev)
bound_sdev <- runif(1,prior$bound_sdev_lower,prior$bound_sdev_upper)
drift_sdev <- runif(1,prior$drift_sdev_lower,prior$drift_sdev_upper)
nondt_sdev <- runif(1,prior$nondt_sdev_lower,prior$nondt_sdev_upper)
bound <- rnorm(nP,bound_mean, bound_sdev)
drift <- rnorm(nP,drift_mean, drift_sdev)
nondt <- rnorm(nP,nondt_mean, nondt_sdev)
parameter_set <- list("bound_mean" = bound_mean, "drift_mean" = drift_mean,
"nondt_mean" = nondt_mean, "bound_sdev" = bound_sdev,
"drift_sdev" = drift_sdev, "nondt_sdev" = nondt_sdev,
"bound" = bound,   "drift" = drift,   "nondt" = nondt)
return(parameter_set)
}
# Sample data using simulation settings and parameter values sampled
sample_data <- function(settings, parameter_set){
nObs = settings$nPart*settings$nTrials
data = matrix(NA,ncol=3,nrow=nObs)
data[,1] = rep(1:settings$nPart, each=settings$nTrials)
for(i in 1:settings$nP){
this.sub <- which(data[,1]==i)
accuracy = 0
while(sum(accuracy)==0){
temp <- wdmrnd(a = parameter_set$bound[i],
v = parameter_set$drift[i],
t = parameter_set$nondt[i],
n = settings$nTrials)
accuracy = temp$accuracy
}
data[this.sub,3] = accuracy
data[this.sub,2] = temp$RT
}
data = as.data.frame(data)
colnames(data) <- c("sub", "rt", "accuracy")
return(data)
}
# Get individual statistics from full data: mean acc and correct-rt mean and var
get_Statistics <- function(data){
if(is.null(data$accuracy)|is.null(data$rt)){
error.msg = "Data not available."
return(print(error.msg))
}
subID  = unique(data$sub)
sum_correct = tapply(data$accuracy, data$sub, sum)
always_0 = which(sum_correct==0)
if(length(always_0)!=0){
bad_participants = (data$sub %in% always_0)
data = data[-bad_participants,]
sum_correct     = tapply(data$accuracy, data$sub, sum)
}
mean_accuracy   = tapply(data$accuracy, data$sub, mean)
keep.correct = which(data$accuracy==1)
correct_only = data[keep.correct,]
mean_rt_correct = tapply(correct_only$rt, correct_only$sub, mean)
var_rt_correct  = tapply(correct_only$rt, correct_only$sub, var)
data_statistics = cbind(subID, sum_correct, mean_accuracy, mean_rt_correct, var_rt_correct)
data_statistics = as.data.frame(data_statistics)
colnames(data_statistics) = c("sub", "sum_correct","meanAccuracy", "meanRT_correct", "varRT_correct")
return(data_statistics)
}
Hddm_Data <- function(settings, parameter_set){
rawData = sample_data(settings,parameter_set)
sumData = get_Statistics(rawData)
jagsData = data_toJAGS()
return(list("rawData" = rawData,
"sumData" = sumData,
"jagsData" = jagsData))
}
settings <- list("nPart"   = nParticipants,
"nTrials" = nTrials,
"prior"   = prior)
parameter_set = sample_parameters(settings)
getData <- Hddm_Data(settings,parameter_set)
getData
write_JAGSmodel(prior)
sub     <- getData$sumData$sub
correct <- getData$sumData$sum_correct
varRT   <- getData$sumData$varRT_correct
meanRT  <- getData$sumData$meanRT_correct
nTrialsPerPerson <- as.numeric(unique(tapply(getData$rawData$accuracy,getData$rawData$sub,length)))
nParticipants    <- length(getData$sumData$sub)
sub
correct
varRT
meanRT
nTrialsPerPerson
nParticipants
data <- getData$jagsData
data
init <- default_inits(n.chains, settings$nPart)
init
parameters <- c('bound_mean', 'drift_mean', 'nondt_mean', 'bound_sdev',
'drift_sdev', 'nondt_sdev', 'bound', 'drift',  'nondt')
parameters <- c("bound_mean", "drift_mean", "nondt_mean", "bound",
"drift_sdev", "nondt_sdev", "bound_sdev", "drift", "nondt")
getwd()
setwd("C:/Users/asus/Desktop/EZ-Project/myRepo")
getwd()
file.exists("EZ-BayesianH_DDM.pdf")
fileName = "samples0.RData"
already.exist = file.exists(fileName)
already.exist
settings <- list("nPart"   = nParticipants,
"nTrials" = nTrials,
"prior"   = prior)
parameter_set = sample_parameters(settings)
getData <- Hddm_Data(settings,parameter_set)
write_JAGSmodel(prior)
sub     <- getData$sumData$sub
correct <- getData$sumData$sum_correct
varRT   <- getData$sumData$varRT_correct
meanRT  <- getData$sumData$meanRT_correct
nTrialsPerPerson <- as.numeric(unique(tapply(getData$rawData$accuracy,getData$rawData$sub,length)))
nParticipants    <- length(getData$sumData$sub)
data <- getData$jagsData
myinits <- default_inits(n.chains, settings$nPart)
parameters <- c("bound_mean", "drift_mean", "nondt_mean", "bound", "nondt",
"drift_sdev", "nondt_sdev", "bound_sdev", "drift")
samples <- jags(data=data,
parameters.to.save=parameters,
model=modelFile,
n.chains=n.chains,
n.iter=n.iter,
n.burnin=n.burnin,
n.thin=n.thin,
DIC=T,
inits=myinits)
library(R2jags)
samples <- jags(data=data,
parameters.to.save=parameters,
model=modelFile,
n.chains=n.chains,
n.iter=n.iter,
n.burnin=n.burnin,
n.thin=n.thin,
DIC=T,
inits=myinits)
samples <- jags(data=data,
parameters.to.save=parameters,
model="./EZHBDDM.bug",
n.chains=n.chains,
n.iter=n.iter,
n.burnin=n.burnin,
n.thin=n.thin,
DIC=T,
inits=myinits)
samples <- jags(data=data,
parameters.to.save=parameters,
model="./EZHBDDM.bug",
n.chains=n.chains,
n.iter=1000,
n.burnin=50,
n.thin=1,
DIC=T,
inits=myinits)
plot(c(1,2,4),c(2,4,6))
plot(c(1,2,4),c(2,4,6), main="Hello")
plot(c(1,2,4),c(2,4,6), main="Hello", sub = "Lala")
