setwd("~/Desktop/Adriana/EZ-project")
# Part 1: Simulate single trial outcome
simulate_ddm <- function(a, v, dt, max_steps){
x <- 0
random_dev <- rnorm(max_steps)
noise <- random_dev * sqrt(dt)
drift <- v * dt
for(i in 2:max_steps){
this_step = drift + noise[i]
x = x + this_step
if(abs(x)>=(a/2)){  break  }
}
output <- list("RT" = (i+1)*dt, "C"  = x)
return(output)
}
# Part 2: Simulate over 'n' trials
wdmrnd <- function(a,v,t,n){
dt = 0.001
max_steps = 10 / dt
rt = rep(NA,n)
accuracy = rep(NA,n)
for(i in 1:n){
X <- simulate_ddm(a, v, dt, max_steps)
rt[i] <- X$RT
if(X$C>0){  accuracy[i] <- 1
}else{    accuracy[i] <- 0  }
}
output <- data.frame("RT" = rt + t, "accuracy" = accuracy)
return(output)
}
wdmrnd()
readLines(wdmrnd)
readLines(wdmrnd())
readLines(wdmrnd(5))
readLines(wdmrnd("n"))
cat(wdmrnd())
exists(data)
exists("data")
data
a
exists("a")
install.packages("Rmarkdown")
install.packages("rmarkdown")
install.packages("rstan")
5+
6
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
a = 1.50
v = 0.00
t = 0.30
n = 10000
data <- wdmrnd(a, v, t, n)
data
library(rstan()
library(rstan
)
install.packages("rstan")
#####################################################################
# Functions to automatically write desired JAGS models
#####################################################################
# A function to write the JAGS model using the prior values
write_JAGSmodel <- function(prior, modelFile = "EZHBDDM.bug"){
opening <- "model{"
prior.bound_m <- paste("          bound_mean ~ dnorm(", prior$bound_mean_mean,",pow(",prior$bound_mean_sdev,",-2))T(0.10,3.00)", sep="")
prior.nondt_m <- paste("          nondt_mean ~ dnorm(", prior$nondt_mean_mean,",pow(",prior$nondt_mean_sdev,",-2))T(0.05,1.00)", sep="")
prior.bound_sd <- paste("          bound_sdev ~ dunif(", prior$bound_sdev_lower,",",prior$bound_sdev_upper,")", sep="")
prior.nondt_sd <- paste("          nondt_sdev ~ dunif(", prior$nondt_sdev_lower,",",prior$nondt_sdev_upper,")", sep="")
prior.drift_sd <- paste("          drift_sdev ~ dunif(", prior$drift_sdev_lower,",",prior$drift_sdev_upper,")", sep="")
priors <- c(prior.bound_m, prior.nondt_m, prior.bound_sd, prior.nondt_sd, prior.drift_sd)
if(!is.null(prior$drift_mean_mean)){
prior.drift_m <- paste("          drift_mean ~ dnorm(", prior$drift_mean_mean,",pow(",prior$drift_mean_sdev,",-2))T(-3.00,3.00)", sep="")
priors <- c(priors, prior.drift_m)
}
if(!is.null(prior$drift_intercept_mean)){
prior.drift_i <- paste("          drift_intrcpt ~ dnorm(", prior$drift_intercept_mean,",pow(",prior$drift_intercept_sdev,",-2))T(-3.00,3.00)", sep="")
priors <- c(priors, prior.drift_i)
}
if(!is.null(prior$drift_coefficient_mean)){
prior.drift_c <- paste("          drift_coeff ~ dnorm(", prior$drift_coefficient_mean,",pow(",prior$drift_coefficient_sdev,",-2))T(-3.00,3.00)", sep="")
priors <- c(priors, prior.drift_c)
}
content.init <-"
# Sampling model
for (p in 1:nParticipants){
bound[p] ~ dnorm(bound_mean, pow(bound_sdev, -2))T(0.10,3.00)
nondt[p] ~ dnorm(nondt_mean, pow(nondt_sdev, -2))T(0.05,1.00)"
if(!is.null(prior$drift_intercept_mean)){
content.mid <- "                  drift_mean = drift_intrcpt"
if(!is.null(prior$drift_coefficient_mean)){
content.mid <- paste(content.mid," + (drift_coeff * x[p])", sep="")
}
content.init <- c(content.init,content.mid)
}
content.end <- "                  drift[p] ~ dnorm(drift_mean, pow(drift_sdev, -2))T(-3.00,3.00)
# Forward equations from EZ Diffusion
ey[p]  = exp(-bound[p] * drift[p])
Pc[p]  = 1 / (1 + ey[p])
PRT[p] = 2 * pow(drift[p], 3) / bound[p] * pow(ey[p] + 1, 2) / (2 * -bound[p] * drift[p] * ey[p] - ey[p]*ey[p] + 1)
MDT[p] = (bound[p] / (2 * drift[p])) * (1 - ey[p]) / (1 + ey[p])
MRT[p] = MDT[p] + nondt[p]
# Loss functions using MRT, PRT, and Pc
meanRT[p]  ~ dnorm(MRT[p], PRT[p] * correct[p])
varRT[p]   ~ dnorm(1/PRT[p], 0.5 * correct[p] * PRT[p] * PRT[p])
correct[p] ~ dbin(Pc[p], nTrialsPerPerson)
}
}"
content <- c(content.init, content.end)
final_file <- file(modelFile)
writeLines(c(opening,priors,content), final_file)
close(final_file)
}
library(rjags)
library(R2jags)
# run the next line if you already have rstan installed
# remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstant()
()
)
library(rstan)
setwd("~/Desktop/Adriana/EZ-project/code/scripts")
getwd()
library("rstudioapi")
getSourceEditorContext()$path
gsub()
locate.File <- getSourceEditorContext()$path
gsub("\\..*","",locate.File)
gsub("\\load_all_functios.*","",locate.File)
gsub("\\load_all_functios.*","",locate.File)
gsub("\\load_all_functios.*","",locate.File)
gsub("\\load_all_functios.*","",locate.File)
gsub("load_all_functios","",locate.File)
gsub("load_all_functios","",locate.File)
gsub("load_all_functios","",locate.File)
gsub("load_all_functios","",locate.File)
gsub("load_all_functios","",locate.File)
gsub("load_all_functios.R","",locate.File)
gsub("load_all_functios.R","",locate.File)
getSourceEditorContext()
getSourceEditorContext()$path
locate.File
gsub('.*/ ?(\\w+)', '\\1', locate.File)
locate_current_file <- getSourceEditorContext()$path
get_current_file_name <- gsub('.*/ ?(\\w+)', '\\1', locate.File)
original_WD <- getwd()
locate_current_file <- getSourceEditorContext()$path
get_current_file_name <- gsub('.*/ ?(\\w+)', '\\1', locate.File)
get_current_File_path <- getSourceEditorContext()$path
get_current_file_name <- gsub('.*/ ?(\\w+)', '\\1', locate.File)
gsub(get_current_file_name,"",as.character(df2$y1))
gsub(get_current_file_name,"",get_current_File_path)
get_current_file_location <- gsub(get_current_file_name,"",get_current_File_path)
setwd(get_current_file_location)
"../functions/"
setwd("../functions/")
get_current_File_path <- getSourceEditorContext()$path
get_current_file_name <- gsub('.*/ ?(\\w+)', '\\1', locate.File)
get_current_file_location <- gsub(get_current_file_name,"",get_current_File_path)
setwd(get_current_file_location)
setwd("../functions/")
for(archive in dir){
print(1)
}
dir
getwd()
for(archive in dir){}
for(archive in dir()){}
for(archive in dir()){print(1)}
for(archive in dir()){
source(archive)
}
###############################################################################
#     A script that loads all custom functions developed for this project,
#                             along with the required R packages
###############################################################################
# Part 1: Working directory (WD) manipulation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
# First, we identify the WD active when calling the present script
original_WD <- getwd()
# Then, we identify the directory where the present script is located
get_current_File_path <- getSourceEditorContext()$path
get_current_file_name <- gsub('.*/ ?(\\w+)', '\\1', locate.File)
get_current_file_name <- gsub('.*/ ?(\\w+)', '\\1', get_current_File_path)
get_current_file_location <- gsub(get_current_file_name,"",get_current_File_path)
setwd(get_current_file_location)
setwd("../functions/")
for(archive in dir()){
source(archive)
}
