paste("X =",0, "No")),
"Change quality" = c(rep(c(paste("Y = ",0, "Qualitative"),
paste("Y = ",1, "Quantitative")),2),""),
"Change type" = c(rep(paste("Z =",0,"Convexity"),2),
rep(paste("Z =",1,"Concavity"),2),""))
colnames(Table) <- c("Condition", "Change (X)", "Change quality (Y)", "Change type (Z)")
styled_table <- Table %>%
mutate(
`Condition` = cell_spec(`Condition`,
color="orange", bold = TRUE),
`Change (X)` = cell_spec(`Change (X)`,
color = ifelse(grepl("Yes", `Change (X)`), "white", "black"),
background = ifelse(grepl("Yes", `Change (X)`), "green", "white")),
`Change quality (Y)` = cell_spec(`Change quality (Y)`,
color = ifelse(grepl("Quantitative", `Change quality (Y)`), "white", "black"),
background = ifelse(grepl("Quantitative", `Change quality (Y)`), "purple", "white")),
`Change type (Z)` = cell_spec(`Change type (Z)`,
color = ifelse(grepl("Concavity", `Change type (Z)`), "white", "black"),
background = ifelse(grepl("Concavity", `Change type (Z)`), "blue", "white"))
) %>%
kable(format = "html", escape = FALSE) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
latex_options = c("striped", "scale_down")) %>%
row_spec(1:nrow(Table), background = "white") #%>%
#column_spec(1:ncol(Table), color = "white", background = "#white")  # Customize column header color here
# Print the styled table
styled_table
Table <- data.frame("Condition" = paste("k =", 1:5),
"Change" = c(rep(paste("X =",1, "Yes"),4),
paste("X =",0, "No")),
"Change quality" = c(rep(c(paste("Y = ",0, "Qualitative"),
paste("Y = ",1, "Quantitative")),2),""),
"Change type" = c(rep(paste("Z =",0,"Convexity"),2),
rep(paste("Z =",1,"Concavity"),2),""))
colnames(Table) <- c("Condition", "Change (X)", "Change quality (Y)", "Change type (Z)")
styled_table <- Table %>%
mutate(
`Condition` = cell_spec(`Condition`,
color="orange", bold = TRUE),
`Change (X)` = cell_spec(`Change (X)`,
color = ifelse(grepl("Yes", `Change (X)`), "white", "black"),
background = ifelse(grepl("Yes", `Change (X)`), "green", "white")),
`Change quality (Y)` = cell_spec(`Change quality (Y)`,
color = ifelse(grepl("Quantitative", `Change quality (Y)`), "white", "black"),
background = ifelse(grepl("Quantitative", `Change quality (Y)`), "purple", "white")),
`Change type (Z)` = cell_spec(`Change type (Z)`,
color = ifelse(grepl("Concavity", `Change type (Z)`), "white", "black"),
background = ifelse(grepl("Concavity", `Change type (Z)`), "blue", "white"))
) %>%
kable(format = "html", escape = FALSE) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
latex_options = c("striped", "scale_down")) %>%
row_spec(1:nrow(Table), background = "white") #%>%
#column_spec(1:ncol(Table), color = "white", background = "#white")  # Customize column header color here
# Print the styled table
styled_table
Table <- data.frame("Condition" = paste("k =", 1:5),
"Change" = c(rep(paste("X =",1, "Yes"),4),
paste("X =",0, "No")),
"Change quality" = c(rep(c(paste("Y = ",0, "Qualitative"),
paste("Y = ",1, "Quantitative")),2),""),
"Change type" = c(rep(paste("Z =",0,"Convexity"),2),
rep(paste("Z =",1,"Concavity"),2),""))
colnames(Table) <- c("Condition", "Change (X)", "Change quality (Y)", "Change type (Z)")
styled_table <- Table %>%
mutate(
`Condition` = cell_spec(`Condition`,
color="orange", bold = TRUE),
`Change (X)` = cell_spec(`Change (X)`,
color = ifelse(grepl("Yes", `Change (X)`), "white", "black"),
background = ifelse(grepl("Yes", `Change (X)`), "green", "white")),
`Change quality (Y)` = cell_spec(`Change quality (Y)`,
color = ifelse(grepl("Quantitative", `Change quality (Y)`), "white", "black"),
background = ifelse(grepl("Quantitative", `Change quality (Y)`), "purple", "white")),
`Change type (Z)` = cell_spec(`Change type (Z)`,
color = ifelse(grepl("Concavity", `Change type (Z)`), "white", "black"),
background = ifelse(grepl("Concavity", `Change type (Z)`), "blue", "white"))
) %>%
kable(format = "html", escape = FALSE) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
latex_options = c("striped", "scale_down")) %>%
row_spec(0:nrow(Table), background = "white") #%>%
#column_spec(1:ncol(Table), color = "white", background = "#white")  # Customize column header color here
# Print the styled table
styled_table
options(htmltools.dir.version = FALSE)
Table <- data.frame("Condition" = paste("k =", 1:5),
"Change" = c(rep(paste("A =",1, "Yes"),4),
paste("A =",0, "No")),
"Change quality" = c(rep(c(paste("B = ",0, "Qualitative"),
paste("B = ",1, "Quantitative")),2),""),
"Change type" = c(rep(paste("C =",0,"Convexity"),2),
rep(paste("C =",1,"Concavity"),2),""))
colnames(Table) <- c("Condition", "Change (A)", "Change quality (B)", "Change type (C)")
styled_table <- Table %>%
mutate(
`Condition` = cell_spec(`Condition`,
color="orange", bold = TRUE),
`Change (A)` = cell_spec(`Change (A)`,
color = ifelse(grepl("Yes", `Change (A)`), "white", "black"),
background = ifelse(grepl("Yes", `Change (A)`), "green", "white")),
`Change quality (B)` = cell_spec(`Change quality (B)`,
color = ifelse(grepl("Quantitative", `Change quality (B)`), "white", "black"),
background = ifelse(grepl("Quantitative", `Change quality (B)`), "purple", "white")),
`Change type (C)` = cell_spec(`Change type (C)`,
color = ifelse(grepl("Concavity", `Change type (C)`), "white", "black"),
background = ifelse(grepl("Concavity", `Change type (C)`), "blue", "white"))
) %>%
kable(format = "html", escape = FALSE) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
latex_options = c("striped", "scale_down")) %>%
row_spec(0:nrow(Table), background = "white")
options(htmltools.dir.version = FALSE)
library(xaringanthemer)
style_mono_accent(base_color = "#9D0336", header_h1_font_size = "55px",
header_h2_font_size = "42px", text_slide_number_color = "#DE2E2E",
text_font_size = "21px")
style_extra_css(
outfile = stdout(),
css = list(".blue" = list(color = "blue"), ".small" = list("font-size" = "90%"),
".full-width" = list(display = "flex",width   = "100%",flex    = "1 1 auto"),
".pull-left" = list(float = "left",width = "70%"),
".pull-right" = list(float = "right",width = "18%"))
)
xaringanExtra::use_tile_view()
xaringanExtra::use_fit_screen()
xaringanExtra::use_extra_styles(hover_code_line = TRUE, mute_unhighlighted_code = TRUE)
htmltools::tagList(
xaringanExtra::use_clipboard(
button_text = "<i class=\"fa fa-clipboard\"></i>",
success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
error_text = "<i class=\"fa fa-times-circle\" style=\"color: #F94144\"></i>"
), rmarkdown::html_dependency_font_awesome())
library(tidyverse)
library(kableExtra)
library(R2jags)
knitr::include_graphics("./Pictures/ez_wagenmakers.png")
knitr::include_graphics("./Pictures/percEx_betas.png")
Table <- data.frame("Condition" = paste("k =", 1:5),
"Change" = c(rep(paste("A =",1, "Yes"),4),
paste("A =",0, "No")),
"Change quality" = c(rep(c(paste("B = ",0, "Qualitative"),
paste("B = ",1, "Quantitative")),2),""),
"Change type" = c(rep(paste("C =",0,"Convexity"),2),
rep(paste("C =",1,"Concavity"),2),""))
colnames(Table) <- c("Condition", "Change (A)", "Change quality (B)", "Change type (C)")
styled_table <- Table %>%
mutate(
`Condition` = cell_spec(`Condition`,
color="orange", bold = TRUE),
`Change (A)` = cell_spec(`Change (A)`,
color = ifelse(grepl("Yes", `Change (A)`), "white", "black"),
background = ifelse(grepl("Yes", `Change (A)`), "green", "white")),
`Change quality (B)` = cell_spec(`Change quality (B)`,
color = ifelse(grepl("Quantitative", `Change quality (B)`), "white", "black"),
background = ifelse(grepl("Quantitative", `Change quality (B)`), "purple", "white")),
`Change type (C)` = cell_spec(`Change type (C)`,
color = ifelse(grepl("Concavity", `Change type (C)`), "white", "black"),
background = ifelse(grepl("Concavity", `Change type (C)`), "blue", "white"))
) %>%
kable(format = "html", escape = FALSE) %>%
kable_styling(full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
latex_options = c("striped", "scale_down")) %>%
row_spec(0:nrow(Table), background = "white")
# Print the styled table
styled_table
knitr::include_graphics("./Pictures/shapePerception.png")
knitr::opts_chunk$set(echo = TRUE)
####################################
#      Custom functions
#  used thorought the assignment
####################################
# 1: A function to extract posterior samples for parameters that
#    have an index (e.g. a vector -theta- or a matrix -Sigma-)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
myExtractingFunction <- function(parameter.name, samples.object){
# We use the sims.array because samples are not shuffled
# Ref: https://sourceforge.net/p/mcmc-jags/discussion/610037/thread/cc61b820/
post.array <- samples.object$BUGSoutput$sims.array
# Identify the parameters stored in each page
samplesID <- names(post.array[1,1,])
# Locate the pages that contain the posterior samples for the parameter of interest
locateParameter <- which(grepl(parameter.name,samplesID))
# We retrieve only the pages containing the parameter
x <- post.array[,,locateParameter]
return(x)
}
# 2: A function to draw vertical histograms
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VerticalHist <- function(x, xscale = NULL, xwidth, hist,
fillCol = "gray80", lineCol = "gray40") {
## x - the x position of each histogram
## xscale - "height" of the tallest bar (horizontally),
## xwidth - horizontal spacing between histograms
## hist - an object of type "histogram" (i.e., with $breaks and $density)
binWidth <- hist$breaks[2] - hist$breaks[1]
if (is.null(xscale)) xscale <- xwidth * 0.90 / max(hist$density)
n <- length(hist$density)
right_x.l <- rep(x, n)
right_x.r <- right_x.l + hist$density * xscale
left_x.r <- rep(x, n)
left_x.l <- left_x.r - hist$density * xscale
x.l = c(left_x.l,right_x.l)
x.r = c(left_x.r,right_x.r)
y.b <- hist$breaks[1:n]
y.b = rep(y.b,2)
y.t <- hist$breaks[2:(n + 1)]
y.t = rep(y.t,2)
rect(xleft = x.l, ybottom = y.b, xright = x.r, ytop = y.t,
col = fillCol, border = fillCol)
}
# 3: Main plotting function
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
makePlot = function(data, binWidth = 0.5, ylab="Parameter name", xlabs=NA,
fillCol="indianred4", CIcolor="gray70", ylim.r=1){
numberOfHists <- ncol(data)
binStarts <- 1:numberOfHists
binMids <- binStarts + binWidth / 2
axisCol <- "gray50"
CI <- apply(data, 2, quantile, prob=c(0.025,0.975))
means <- apply(data, 2, mean)
## Data handling
allValues <- unlist(as.list(data))
DOYrange <- range( allValues, na.rm = TRUE )
DOYrange <- c(round(min(data),1),round(max(data),1))
DOYmean <- apply(data,2,mean)
quantiles <- round(quantile( DOYrange, c(0.2, 0.4, 0.6, 0.8), na.rm=TRUE ), digits=0)
gridlines <- round(quantile( DOYrange, c(0.1, 0.3, 0.5, 0.7, 0.9), na.rm=TRUE ), digits=0)
## Get the histogram obects
histList <- apply( data, 2, function(x, hCol) hist(x, plot = FALSE))
## Plotting
xlim <- c(0,numberOfHists+1)
ylim <- c(round(min(data),ylim.r),round(max(data),ylim.r))
xlab <- ""
if(sum(is.na(xlabs))>0){ xlabs <- paste("Level",1:numberOfHists,sep=" ")}
if(length(fillCol)==1){ fillCol <- rep(fillCol,numberOfHists)}
if(length(CIcolor)==1){ CIcolor <- rep(CIcolor,numberOfHists)}
plot(c(0, 5), DOYrange, type = "n", xlim=xlim, ylim=ylim,
ann = FALSE, axes = FALSE, xaxs = "i", yaxs = "i")
axis(1, 1:numberOfHists, xlabs, cex.axis = 0.8, col = axisCol)
mtext(side = 1, outer = F, line = 2.5, xlab, cex = 1.2)
y.seq = format(round(seq(DOYrange[1],DOYrange[2],length.out=10),digits = 2), nsmall = 1)
axis(2, cex.axis = 0.95, las = 1, line = -.7, col = "white", tck = 0,
at = y.seq, labels = y.seq, las=2)
mtext(side = 2, outer = F, line = 2.8, ylab, cex = 1.2)
box(bty = "L", col = axisCol)
biggestDensity <- max(unlist(lapply(histList, function(h){max(h[[4]])})))
xscale <- binWidth * .9 / biggestDensity
## Plot the histograms
for (i in 1:numberOfHists) {
X <- binStarts[i]
polygon(x=c(X-0.3, X+0.3, X+0.3, X-0.3),
y=c(CI[1,i], CI[1,i], CI[2,i], CI[2,i]),
col = CIcolor[i], border=NA)
VerticalHist(x = X, xscale = xscale,
xwidth = binWidth,
hist= histList[[i]],
fillCol = fillCol[i])
lines(x=c(X-0.3, X+0.3), y=c(means[i],means[i]), lwd=3)
}
}
# Miscellaneous plotting functions
###################################################
mySeq <- function(x){ seq(min(x),max(x),length.out=10)  }
knitr::include_graphics("./Pictures/shapePerc_QualTypeChangeEffcts.png")
knit_with_parameters("~/Dropbox/cidlab/achavezd/Presentations/MathPsych_2024/AdrianaChavez_MathPsych2024.Rmd")
options(htmltools.dir.version = FALSE)
knitr::include_graphics("./Pictures/percEx_predictions.png")
knitr::include_graphics("./Pictures/percEx_predictions.png")
knitr::include_graphics("./Pictures/qr.png")
install.packages("psycModels")
install.packages("psycModel")
library(psycModel)
html_to_pdf("./AdrianaChavez_MathPsych2024.html")
library(psycModel)
install.packages("psycModel")
library(psycModel)
html_to_pdf("./AdrianaChavez_MathPsych2024.html")
install.packages('pagedown')
html_to_pdf("./AdrianaChavez_MathPsych2024.html")
html_to_pdf("./AdrianaChavez_MathPsych2024.html")
library(psycModel)
library(pagedown)
html_to_pdf("./AdrianaChavez_MathPsych2024.html")
knitr::opts_chunk$set(echo = TRUE)
library(rmdformats)
# Load necessary libraries/packages
library(R2jags)
seed <- 15
data_raw <- read.csv("./vpw08.csv")
colnames(data_raw) <- c("sub", "change_quality", "change_type", "noChange", "response", "rt")
head(data_raw)
# No. of observations
nrow(data_raw)
tmp <- data_raw[which(data_raw$rt<=3),]
change <- 1-tmp$noChange
cond <- rep(0,nrow(tmp))
cond[which(tmp$change_quality==0&tmp$change_type==0)] <- 1
cond[which(tmp$change_quality==1&tmp$change_type==0)] <- 2
cond[which(tmp$change_quality==0&tmp$change_type==1)] <- 3
cond[which(tmp$change_quality==1&tmp$change_type==1)] <- 4
cond[which(change==0)] <- 5
data <- data.frame("sub" = tmp$sub, "cond" = cond, "change" = change,
"change_quality" = tmp$change_quality, "change_type" = tmp$change_type,
"response" = tmp$response, "rt" = tmp$rt)
# Define a function to compute the summary statistics used by EZ-DDM
ez_summaries <- function(data){
# Identify condition ID
cond <- unique(data$cond)
sub <- unique(data$sub)
output<- c()
for(i in sort(sub)){
for(k in sort(cond)){
subset <- data[which(data$sub==i&data$cond==k),]
output <- rbind(output, c("sub" = unique(subset$sub), "cond" = unique(subset$cond),
"change" = unique(subset$change),
"change_quality" = unique(subset$change_quality),
"change_type" = unique(subset$change_type),
"nTrials" = nrow(subset), "score" = sum(subset$response),
"meanRT"  = mean(subset$rt), "varRT"= var(subset$rt)))
}
}
return(as.data.frame(output))
}
ezdata <- ez_summaries(data)
ezdata$acc_rate <- ezdata$score/ezdata$nTrials
# Is there a change?
# Yes (1) / No (0)
X <- ezdata$change
# Change quality
# Quantitative (1) / Qualitative (0)
Y <- ezdata$change_quality
# Change type
# Concavity (1) / Convexity (0)
Z <- ezdata$change_type
model <- write("
model {
####### Priors
drift_mu ~ dnorm(0,1)   # Baseline
drift_lambda ~ dgamma(2,1)
drift_sigma = pow(drift_lambda, -0.5)
for(i in 1:4){
gamma[i] ~ dnorm(0,1)
}
####### Sampling model
for (k in 1:length(nTrials)) {
# Person-by-condition parameters for DM parameters
bound[k] ~ dgamma(2,1)
nondt[k] ~ dexp(1)
drift_pred[k] = drift_mu + X[k]*(gamma[1]*Y[k]+gamma[2]*Z[k]+gamma[3]*Y[k]*Z[k])
+ (1-X[k])*gamma[4]
drift[k] ~ dnorm(drift_pred[k],drift_lambda)
# Forward equations from EZ Diffusion
ey[k]  = exp(-bound[k] * drift[k])
Pc[k]  = 1 / (1 + ey[k])
PRT[k] = 2 * pow(drift[k], 3) / bound[k] * pow(ey[k] + 1, 2) / (2 * -bound[k] *
drift[k] * ey[k] - ey[k] * ey[k] + 1)
MDT[k] = (bound[k] / (2 * drift[k])) * (1 - ey[k]) / (1 + ey[k])
MRT[k] = MDT[k] + nondt[k]
# Sampling distributions for summary statistics
correct[k] ~ dbin(Pc[k], nTrials[k])
varRT[k]   ~ dnorm(1/PRT[k], 0.5*(nTrials[k]-1) * PRT[k] * PRT[k])
meanRT[k]  ~ dnorm(MRT[k], PRT[k] * nTrials[k])
}
}", "./model_shapePerception.bug")
# General setup
n.chains  <- 4;      n.iter    <- 2500
n.burnin  <- 250;    n.thin    <- 1
# Pass data to JAGS
data_toJAGS <- list("nTrials"  =  ezdata$nTrials,
"meanRT"   =  ezdata$meanRT,
"varRT"    =  ezdata$varRT,
"correct"  =  ezdata$score,
"X" = X, "Y" = Y, "Z" = Z)
# Specify parameters to keep track of
parameters <- c('gamma', 'drift_mu', 'drift_lambda', 'drift_sigma', 'drift_pred',
'drift','bound', 'nondt', "Pc", "PRT", "MRT")
set.seed(seed)
# Prepare initial values
myinits <- rep(list(list()), n.chains)
for(i in 1:n.chains){
myinits[[i]] <- list(drift = rnorm(nrow(ezdata),0,1))
}
set.seed(seed)
samples <- jags(data=data_toJAGS,
parameters.to.save=parameters,
model="./model_shapePerception.bug",
n.chains=n.chains,  n.iter=n.iter,
n.burnin=n.burnin,  n.thin=n.thin,
DIC=T, inits=myinits)
##### Drift rate parameters
# Recovered drift rates
drift <- samples$BUGSoutput$sims.list$drift
# Regression coefficients
mu <- samples$BUGSoutput$sims.list$drift_mu
gamma <- samples$BUGSoutput$sims.list$gamma
# Fitted values / Predicted drift rates
drift_pred <- samples$BUGSoutput$sims.list$drift_pred
##### Summary statistics computed from the recovered drift and boundary
Pc   <- samples$BUGSoutput$sims.list$Pc
PRT  <- samples$BUGSoutput$sims.list$PRT
MRT  <- samples$BUGSoutput$sims.list$MRT
set.seed(seed)
# Number of trials per condition
nTrials <- ezdata$nTrials
# Number of posterior samples
n <- nrow(Pc)
# Number of conditions
J <- ncol(Pc)
# Empty matrices to store posterior predictions
pp_accRate <- matrix(NA, nrow=n, ncol=J)
pp_meanRT  <- matrix(NA, nrow=n, ncol=J)
pp_varRT   <- matrix(NA, nrow=n, ncol=J)
# Obtain posterior predictions using sampling distributions
#        and the summary statistics derived from the recovered
#        drift and boundary parameters
for(i in 1:J){
correct  <-  rbinom(n,nTrials[i],Pc[,i])
pp_accRate[,i] <- correct/nTrials[i]
pp_varRT[,i]   <- rnorm(n,1/PRT[,i], sqrt(2/((nTrials[i]-1) * PRT[,i] * PRT[,i])))
pp_meanRT[,i]  <- rnorm(n,MRT[,i],sqrt(1/(PRT[,i]*nTrials[i])))
}
# Custom function to select colors
myCol <- function(r,g,b,sub,alpha=1){
rgb(r[sub]/255,g[sub]/255,b[sub]/255,alpha)
}
r <- matrix(NA, ncol=5,nrow=9)
g <- matrix(NA, ncol=5,nrow=9)
b <- matrix(NA, ncol=5,nrow=9)
# Paleta violeta
r[,1] <- round(seq(124,234, length.out=9),0)
g[,1] <- round(seq(33,46, length.out=9),0)
b[,1] <- round(seq(135,255, length.out=9),0)
# Paleta verde
r[,2] <- round(seq(30,90, length.out=9),0)
g[,2] <- round(seq(116,255, length.out=9),0)
b[,2] <- round(seq(54,93, length.out=9),0)
# Paleta azul
r[,3] <- round(seq(44,108, length.out=9),0)
g[,3] <- round(seq(87,173, length.out=9),0)
b[,3] <- round(seq(142,255, length.out=9),0)
# Paleta amarillo
r[,4] <- round(seq(123,255, length.out=9),0)
g[,4] <- round(seq(104,210, length.out=9),0)
b[,4] <- round(seq(34,49, length.out=9),0)
# Paleta rojo
r[,5] <- round(seq(99,255, length.out=9),0)
g[,5] <- round(seq(25,40, length.out=9),0)
b[,5] <- round(seq(25,40, length.out=9),0)
layout(mat = matrix(c(1,1,2,2,3,3,0,4,4,5,5,0), nrow = 2, byrow = TRUE))
par(pty="m", mai=c(0.45,0.5,0.25,0), oma= c(0,0,1,1.5))
curve.gamma1 <- myCol(r[,2],g[,2],b[,2],5,0.5)
line.gamma1  <- myCol(r[,2],g[,2],b[,2],2,1)
curve.gamma2 <- myCol(r[,3],g[,3],b[,3],5,0.5)
line.gamma2  <- myCol(r[,3],g[,3],b[,3],2,1)
curve.gamma3 <- myCol(r[,4],g[,4],b[,4],5,0.5)
line.gamma3  <- myCol(r[,4],g[,4],b[,4],2,1)
curve.gamma4 <- myCol(r[,5],g[,5],b[,5],5,0.5)
line.gamma4  <- myCol(r[,5],g[,5],b[,5],2,1)
curve.mu <- myCol(r[,1],g[,1],b[,1],5,0.5)
line.mu  <- myCol(r[,1],g[,1],b[,1],2,1)
max.Y <- c(max(density(gamma[,1])$y,density(gamma[,2])$y,density(gamma[,3])$y))
hist(gamma[,1], freq = FALSE, breaks = 50, col=curve.gamma1, border = curve.gamma1,
ann=F, axes = T, ylim = c(0, max.Y), xlim=c(-1.5,1.5))
lines(density(gamma[,1]), lwd=4, col=line.gamma1)
mtext("Quantitative change", cex=0.75, f=2, side=3, line=1.2)
mtext("(Main effect)", cex=0.75, f=2, side=3, line=0.1, col="gray30")
mtext("Density",side=2,line=2.15, cex=0.8)
mtext("Gamma 1",side=1,line=2, cex=0.75)
abline(v=0,lty=2,col="gray50")
hist(gamma[,2], freq = FALSE, breaks = 50, col=curve.gamma2, border = curve.gamma2,
ann=F, axes = T, ylim = c(0, max.Y), xlim=c(-1.5,1.55))
lines(density(gamma[,2]), lwd=4, col=line.gamma2)
mtext("Change in Concavity", cex=0.75, f=2, side=3, line=1.2)
mtext("(Main effect)", cex=0.75, f=2, side=3, line=0.1, col="gray30")
mtext("Gamma 2",side=1,line=2, cex=0.75)
abline(v=0,lty=2,col="gray50")
hist(gamma[,3], freq = FALSE, breaks = 50, col=curve.gamma3, border = curve.gamma3,
ann=F, axes = T, ylim = c(0, max.Y), xlim=c(-1.5,1.5))
lines(density(gamma[,3]), lwd=4, col=line.gamma3)
mtext("Quantitative change in Concavity", cex=0.75, f=2, side=3, line=1.2)
mtext("(Interaction effect)", cex=0.75, f=2, side=3, line=0.1, col="gray30")
mtext("Gamma 3",side=1,line=2, cex=0.75)
abline(v=0,lty=2,col="gray50")
max.Y <- c(max(density(gamma[,4])$y,density(mu)$y))+0.1
hist(gamma[,4], freq = FALSE, breaks = 50, col=curve.gamma4, border = curve.gamma4,
ann=F, axes = T, ylim=c(0, max.Y))
lines(density(gamma[,4]), lwd=4, col=line.gamma4)
mtext("Change NOT occuring", cex=0.75, f=2, side=3, line=0.5)
mtext("(Main effect)", cex=0.75, f=2, side=3, line=-0.6, col="gray30")
mtext("Density",side=2,line=2.15, cex=0.8)
mtext("Gamma 4",side=1,line=2, cex=0.75)
abline(v=0,lty=2,col="gray50")
hist(mu, freq = FALSE, breaks = 50, col=curve.mu, border = curve.mu, ann=F,
axes = T, ylim=c(0, max.Y))
lines(density(mu), lwd=4, col=line.mu)
mtext("Qualitative change in Convexity", cex=0.75, f=2, side=3, line=0.5)
mtext("(Intercept; Baseline drift)", cex=0.75, f=2, side=3, line=-0.6, col="gray30")
mtext("Mu",side=1,line=2, cex=0.75)
abline(v=0,lty=2,col="gray50")
knitr::opts_chunk$set(echo = TRUE)
library(rmdformats)
data_raw <- read.csv("https://raw.githubusercontent.com/Adrifelcha/EZ-project/main/examples/shape_perception/data/vpw08.csv")
data_raw
setwd("~/Desktop/Adriana/EZ-project/examples/shape_perception")
data
"./scripts/loadData.R"
